#! /bin/sh
#
# This script should be called by upssched via the CMDSCRIPT directive.
# 
# Here is a quick example to show how to handle a bunch of possible
# timer names with the help of the case structure.
#
# This script may be replaced with another program without harm.
#
# The first argument passed to your CMDSCRIPT is the name of the timer
# from your AT lines.

case $1 in
    onbatt)
        wall "UPS is running on battery power! Shutdown in 5 minutes if power is not restored."
        logger -t upssched-cmd "UPS on battery power."
    ;;
    onpower)
        wall "Grid power restored."
        logger -t upssched-cmd "UPS on grid power."
    ;;
    onbatt_shutdown)
        wall "Shutting down server, clients, and UPS due to power failure"
        logger -t upssched-cmd "Shutting down due to power failure."
        /opt/nut-scripts/sd.sh # Shut down router and Raspberry Pi 
        # /usr/bin/upsrw -s ups.timer.shutdown=60 -u admin -p <password> -w main # mib=ietf
        /usr/bin/upscmd -u admin -p <password> -w main load.off.delay 60         # mib=pw
        /usr/bin/upscmd -u admin -p <password> -w aux load.off.delay 60          # mib=pw
        /sbin/upsmon -c fsd # Won't shut down UPS on its own.
        # manually calling the load.off.delay command has its advantages 
    ;;
    # mute_beeper)
        # logger -t upssched-cmd "Muting beeper..."
        # /usr/bin/upscmd -u admin -p test -w main beeper.mute=1 # only available for mib=ietf
    # ;;
    # replace_batt)
        # logger -t upssched-cmd "Replace UPS battery"             # only available for mib=ietf
    # ;;                                                       # and does not work
    # upsgone)
        # logger -t upssched-cmd "The communication with UPS has been gone for awhile"
    # ;;
    *)
        logger -t upssched-cmd "Unrecognized command: $1"
    ;;
esac

